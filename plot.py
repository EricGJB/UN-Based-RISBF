from matplotlib import pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
from scipy import io
import numpy as np

M = 1
N_list = [8,16,32,64,128]
results = io.loadmat('./mat/M=%d.mat'%M)
random_list = np.squeeze(results['Random_results'])
optimal_list = np.squeeze(results['Optimal_results'])
un_list = np.squeeze(results['UN_results'])

ax=plt.subplot(111)
#plt.xlim(-20.5, 20)
#plt.ylim(0, 105)
plt.plot(N_list,random_list,'yo-',N_list,optimal_list,'ro-',N_list,un_list,'bo-')
plt.xlabel('N')
plt.ylabel('Objective')
plt.title('M = %d'%M)
plt.legend(['Random','Optimal','RISBFNN'])
xmajorLocator   = MultipleLocator(8)
xmajorFormatter = FormatStrFormatter('%d') 
xminorLocator   = MultipleLocator(8) 
ymajorLocator   = MultipleLocator(1000) 
ymajorFormatter = FormatStrFormatter('%d') 
yminorLocator   = MultipleLocator(500)
ax.xaxis.set_major_locator(xmajorLocator)
ax.xaxis.set_major_formatter(xmajorFormatter)
ax.yaxis.set_major_locator(ymajorLocator)
ax.yaxis.set_major_formatter(ymajorFormatter)
ax.xaxis.set_minor_locator(xminorLocator)
ax.yaxis.set_minor_locator(yminorLocator)
ax.xaxis.grid(True, which='minor',linewidth=0.2) 
ax.xaxis.grid(True, which='major',linewidth=0.6) 
ax.yaxis.grid(True, which='minor',linewidth=0.2) 
ax.yaxis.grid(True, which='major',linewidth=0.6) 
#plt.savefig('./SingleAntenna.eps',format='eps',doi=1000)
plt.savefig(r'F:\research\AI+WC\beamforming\Passive BF LIS\paper\arxiv\SingleAntenna.png')

M = 2
N_list = [8,16,32,64] # 128
results = io.loadmat('./mat/M=%d.mat'%M)
random_list = np.squeeze(results['Random_results'])
cvx_list = np.squeeze(results['CVX_results'])
un_list = np.squeeze(results['UN_results'])

ax=plt.subplot(111)
#plt.xlim(-20.5, 20)
#plt.ylim(0, 105)
plt.plot(N_list,random_list,'yo-',N_list,cvx_list,'ro-',N_list,un_list,'bo-')
plt.xlabel('N')
plt.ylabel('Objective')
plt.title('M = %d'%M)
plt.legend(['Random','SDR','RISBFNN'])
xmajorLocator   = MultipleLocator(8)
xmajorFormatter = FormatStrFormatter('%d') 
xminorLocator   = MultipleLocator(8) 
ymajorLocator   = MultipleLocator(500) 
ymajorFormatter = FormatStrFormatter('%d') 
yminorLocator   = MultipleLocator(100)
ax.xaxis.set_major_locator(xmajorLocator)
ax.xaxis.set_major_formatter(xmajorFormatter)
ax.yaxis.set_major_locator(ymajorLocator)
ax.yaxis.set_major_formatter(ymajorFormatter)
ax.xaxis.set_minor_locator(xminorLocator)
ax.yaxis.set_minor_locator(yminorLocator)
ax.xaxis.grid(True, which='minor',linewidth=0.2) 
ax.xaxis.grid(True, which='major',linewidth=0.6) 
ax.yaxis.grid(True, which='minor',linewidth=0.2) 
ax.yaxis.grid(True, which='major',linewidth=0.6) 
#plt.savefig('./SingleAntenna.eps',format='eps',doi=1000)
plt.savefig(r'F:\research\AI+WC\beamforming\Passive BF LIS\paper\arxiv\M=%d.png'%M)

M = 4
N_list = [8,16,32,64] # 128
results = io.loadmat('./mat/M=%d.mat'%M)
random_list = np.squeeze(results['Random_results'])
cvx_list = np.squeeze(results['CVX_results'])
un_list = np.squeeze(results['UN_results'])

ax=plt.subplot(111)
#plt.xlim(-20.5, 20)
#plt.ylim(0, 105)
plt.plot(N_list,random_list,'yo-',N_list,cvx_list,'ro-',N_list,un_list,'bo-')
plt.xlabel('N')
plt.ylabel('Objective')
plt.title('M = %d'%M)
plt.legend(['Random','SDR','RISBFNN'])
xmajorLocator   = MultipleLocator(8)
xmajorFormatter = FormatStrFormatter('%d') 
xminorLocator   = MultipleLocator(8) 
ymajorLocator   = MultipleLocator(500) 
ymajorFormatter = FormatStrFormatter('%d') 
yminorLocator   = MultipleLocator(100)
ax.xaxis.set_major_locator(xmajorLocator)
ax.xaxis.set_major_formatter(xmajorFormatter)
ax.yaxis.set_major_locator(ymajorLocator)
ax.yaxis.set_major_formatter(ymajorFormatter)
ax.xaxis.set_minor_locator(xminorLocator)
ax.yaxis.set_minor_locator(yminorLocator)
ax.xaxis.grid(True, which='minor',linewidth=0.2) 
ax.xaxis.grid(True, which='major',linewidth=0.6) 
ax.yaxis.grid(True, which='minor',linewidth=0.2) 
ax.yaxis.grid(True, which='major',linewidth=0.6) 
#plt.savefig('./SingleAntenna.eps',format='eps',doi=1000)
plt.savefig(r'F:\research\AI+WC\beamforming\Passive BF LIS\paper\arxiv\M=%d.png'%M)

M = 8
N_list = [8,16,32,64] # 128
results = io.loadmat('./mat/M=%d.mat'%M)
random_list = np.squeeze(results['Random_results'])
cvx_list = np.squeeze(results['CVX_results'])
un_list = np.squeeze(results['UN_results'])

ax=plt.subplot(111)
#plt.xlim(-20.5, 20)
#plt.ylim(0, 105)
plt.plot(N_list,random_list,'yo-',N_list,cvx_list,'ro-',N_list,un_list,'bo-')
plt.xlabel('N')
plt.ylabel('Objective')
plt.title('M = %d'%M)
plt.legend(['Random','SDR','RISBFNN'])
xmajorLocator   = MultipleLocator(8)
xmajorFormatter = FormatStrFormatter('%d') 
xminorLocator   = MultipleLocator(8) 
ymajorLocator   = MultipleLocator(500) 
ymajorFormatter = FormatStrFormatter('%d') 
yminorLocator   = MultipleLocator(100)
ax.xaxis.set_major_locator(xmajorLocator)
ax.xaxis.set_major_formatter(xmajorFormatter)
ax.yaxis.set_major_locator(ymajorLocator)
ax.yaxis.set_major_formatter(ymajorFormatter)
ax.xaxis.set_minor_locator(xminorLocator)
ax.yaxis.set_minor_locator(yminorLocator)
ax.xaxis.grid(True, which='minor',linewidth=0.2) 
ax.xaxis.grid(True, which='major',linewidth=0.6) 
ax.yaxis.grid(True, which='minor',linewidth=0.2) 
ax.yaxis.grid(True, which='major',linewidth=0.6) 
#plt.savefig('./SingleAntenna.eps',format='eps',doi=1000)
plt.savefig(r'F:\research\AI+WC\beamforming\Passive BF LIS\paper\arxiv\M=%d.png'%M)